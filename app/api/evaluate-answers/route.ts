import { Questions } from "@/types";
import { GoogleGenerativeAI, SchemaType } from "@google/generative-ai";

// Define the types for the request body
interface EvaluateQuestionRequest {
  allQuestions: Questions[];
}

// Define the schema for the response from Gemini (structured response)
const schema = {
  description: "Evaluate the answers to the interview questions",
  type: SchemaType.ARRAY,
  items: {
    type: SchemaType.OBJECT,
    properties: {
      id: {
        type: SchemaType.NUMBER,
        description: "The ID of the question",
        nullable: false,
      },
      question: {
        type: SchemaType.STRING,
        description: "The question to evaluate",
        nullable: false,
      },
      answer: {
        type: SchemaType.STRING,
        description: "The given answer to the question",
        nullable: false,
      },
      idealAnswer: {
        type: SchemaType.STRING,
        description: "The ideal answer to the question generated by Gemini",
        nullable: false,
      },
      score: {
        type: SchemaType.NUMBER,
        description:
          "The score given to the answer based on the ideal answer out of 10",
        nullable: false,
      },
      feedback: {
        type: SchemaType.STRING,
        description: "The feedback provided for the given answer",
        nullable: true,
      },
    },
    required: ["id", "question", "answer", "idealAnswer", "score", "feedback"],
  },
};

export async function POST(req: Request): Promise<Response> {
  try {
    const body: EvaluateQuestionRequest = await req.json();
    const { allQuestions } = body;

    const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY!);
    const model = genAI.getGenerativeModel({
      model: "gemini-1.5-flash",
      generationConfig: {
        responseMimeType: "application/json",
        responseSchema: schema,
      },
    });

    // Create the dynamic prompt for Gemini
    const prompt = `
      Evaluate the following answers to interview questions. For each question, assess the given answer based on the following criteria:
      
      1. **Correctness**: Is the answer factually correct and aligned with the question asked?
      2. **Relevance**: Does the answer directly address the question, or is it off-topic?
      3. **Depth**: Does the answer demonstrate an appropriate level of detail and understanding for the interview level?
      4. **Clarity**: Is the answer well-articulated and easy to understand?
      5. **Practicality**: Does the answer reflect real-world applicability or provide practical insights?

      Provide:
      - A short evaluation summary for each answer.
      - An overall score (out of 10) based on the above criteria.
      - An ideal answer for comparison.
      - Constructive feedback to help improve the answer.

      Keep in mind the following:
      - Do not provide code snippets or technical solutions.

      Questions and answers to evaluate:
      ${allQuestions
        .map((question) => {
          return `
          Question ID: ${question.id}
          Question: ${question.question}
          Given Answer: ${question.answer}
          `;
        })
        .join("\n")}
    `;

    // Get the structured response from Gemini
    const result = await model.generateContent(prompt);

    const res = result?.response?.text();
    const jsonResp = {
      data: JSON.parse(res),
    };

    return new Response(JSON.stringify(jsonResp), {
      status: 200,
      headers: { "Content-Type": "application/json" },
    });
  } catch (error) {
    console.error(error);
    const errorMessage = (error as Error).message;
    return new Response(JSON.stringify({ error: errorMessage }), {
      status: 400,
      headers: { "Content-Type": "application/json" },
    });
  }
}
